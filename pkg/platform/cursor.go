package platform

import (
	"fmt"
	"strings"
	"time"

	"github/pfinal/pf_ruler/pkg/rules"
)

// CursorAdapter Cursor平台适配器
type CursorAdapter struct{}

// NewCursorAdapter 创建新的Cursor适配器
func NewCursorAdapter() *CursorAdapter {
	return &CursorAdapter{}
}

// Name 返回平台名称
func (c *CursorAdapter) Name() string {
	return "cursor"
}

// DefaultOutputPath 返回Cursor规则默认输出路径
// Cursor编辑器使用 .cursorrules 文件，放在项目根目录
func (c *CursorAdapter) DefaultOutputPath() string {
	return ".cursorrules"
}

// Convert 将统一规则转换为Cursor格式
// Cursor使用纯文本格式，每行一个规则
func (c *CursorAdapter) Convert(ruleSet *rules.RuleSet) ([]byte, error) {
	var content strings.Builder
	
	// 写入文件头部说明
	content.WriteString(fmt.Sprintf("# Cursor Rules for %s\n", ruleSet.Metadata.ProjectName))
	content.WriteString(fmt.Sprintf("# Generated by pf_ruler on %s\n\n", time.Now().Format("2006-01-02 15:04:05")))
	
	// 写入项目信息
	content.WriteString("## Project Information\n")
	content.WriteString(fmt.Sprintf("Project: %s\n", ruleSet.Metadata.ProjectName))
	if len(ruleSet.Metadata.TechStacks) > 0 {
		content.WriteString(fmt.Sprintf("Tech Stack: %s\n", strings.Join(ruleSet.Metadata.TechStacks, ", ")))
	}
	content.WriteString("\n")
	
	// 写入项目规则（最高优先级）
	if len(ruleSet.ProjectRules) > 0 {
		content.WriteString("## Project-Specific Rules (Highest Priority)\n\n")
		
		for _, rule := range ruleSet.ProjectRules {
			if !rule.Enabled {
				continue
			}
			
			content.WriteString(fmt.Sprintf("### %s\n", rule.Title))
			content.WriteString(fmt.Sprintf("Type: %s | Priority: %d | Tags: %s\n", 
				rule.Type, rule.Priority, strings.Join(rule.Tags, ", ")))
			content.WriteString(fmt.Sprintf("Description: %s\n", rule.Description))
			content.WriteString(fmt.Sprintf("Rule: %s\n\n", rule.Content))
		}
	}
	
	// 写入全局规则（次优先级）
	if len(ruleSet.GlobalRules) > 0 {
		content.WriteString("## Global Rules (Medium Priority)\n\n")
		
		for _, rule := range ruleSet.GlobalRules {
			if !rule.Enabled {
				continue
			}
			
			content.WriteString(fmt.Sprintf("### %s\n", rule.Title))
			content.WriteString(fmt.Sprintf("Type: %s | Priority: %d | Tags: %s\n", 
				rule.Type, rule.Priority, strings.Join(rule.Tags, ", ")))
			content.WriteString(fmt.Sprintf("Description: %s\n", rule.Description))
			content.WriteString(fmt.Sprintf("Rule: %s\n\n", rule.Content))
		}
	}
	
	// 写入模板规则（可选）
	if len(ruleSet.TemplateRules) > 0 {
		content.WriteString("## Custom Template Rules\n\n")
		
		for _, rule := range ruleSet.TemplateRules {
			if !rule.Enabled {
				continue
			}
			
			content.WriteString(fmt.Sprintf("### %s\n", rule.Title))
			content.WriteString(fmt.Sprintf("Type: %s | Priority: %d | Tags: %s\n", 
				rule.Type, rule.Priority, strings.Join(rule.Tags, ", ")))
			content.WriteString(fmt.Sprintf("Description: %s\n", rule.Description))
			content.WriteString(fmt.Sprintf("Rule: %s\n\n", rule.Content))
		}
	}
	
	// 写入使用说明
	content.WriteString("## Usage Instructions\n\n")
	content.WriteString("This rules file is automatically generated by pf_ruler tool.\n")
	content.WriteString("It guides the AI editor to generate code that follows project standards.\n\n")
	
	content.WriteString("### Rule Priority\n")
	content.WriteString("1. Project-specific rules - Highest priority, override other rules\n")
	content.WriteString("2. Global rules - Medium priority, apply to all projects\n")
	content.WriteString("3. Template rules - Optional, from user configuration\n\n")
	
	content.WriteString("### Updating Rules\n")
	content.WriteString("To update rules, modify the corresponding files in the .ruler directory,\n")
	content.WriteString("then re-run: pf_ruler generate --platform=cursor\n")
	
	return []byte(content.String()), nil
}

// EnsureOutputDirectory 确保输出目录存在
// 对于Cursor，文件直接放在项目根目录，不需要创建子目录
func (c *CursorAdapter) EnsureOutputDirectory() error {
	// Cursor使用 .cursorrules 文件，直接放在项目根目录
	// 不需要创建额外的目录结构
	return nil
}
